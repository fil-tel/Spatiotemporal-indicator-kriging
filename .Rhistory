summary(df$As)
df
##  define coordinates
xy <- df[,c(4,5)]
# Convert to spatial point
SPDF <- SpatialPointsDataFrame(coords = xy, data=df)
SPDF
?proj4string
CRS("+proj=longlat +ellps=WGS84")
# Define projection
proj4string(SPDF) = CRS("+proj=longlat +ellps=WGS84")  # WGS 84
proj4string(bd)
# Change projection
BUTM<-proj4string(bd)              # extract projection information
SPDF.PROJ<- spTransform(SPDF,        # Input SPDF
BUTM)
# convert to a data-frame
point.df<-as.data.frame(SPDF.PROJ)
# Rename (last two column)
colnames(point.df)[35] <- "x"
colnames(point.df)[36] <- "y"
mf<-point.df[,c(35:36,7,15,23)]
head(mf)
summary(mf$As)
ik.10<-mf$As > 10    # threshold 10 ppb
ik.df$VAR <- ik.10
mff$VAR <- ik.10
mf$VAR <- ik.10
grid
coordinates(ik.df)=~x+y
mf$VAR <- ik.10
ik.df <- mf
coordinates(ik.df)=~x+y
# This are supposed to be the sampled points
coordinates(grid) = ~x+y
spplot(ik.df, zcol = "As", col.regions = c("green", "orange", "red"), cex=.5,
main = "Groundwater As  (ppb)")
p1<-spplot(ik.df, zcol = "ik.10", col.regions = c("green", "red"), cex=.5,
main = "As > 10 ppb")
p1<-spplot(ik.df, zcol = "ik.50", col.regions = c("green", "red"), cex=.5,
main = "As > 10 ppb")
p1<-spplot(ik.df, col.regions = c("green", "red"), cex=.5,
main = "As > 10 ppb")
class(ik.df)
p1 <- spplot(ik.df,  col.regions = c("green", "red"), cex=.5,
main = "As > 10 ppb")
p1 <- spplot(ik.df, zcol="VAR", col.regions = c("green", "red"), cex=.5,
main = "As > 10 ppb")
p1
nrow(df)
zerodist(ik.df)
# REMOVE DUPLICATES
ik.df <- ik.df[-zerodist(ik.df)[,1],]
# Variogram
v10<-variogram(VAR~ 1, data = ik.df)
library(tidyverse)
library(GenomicRanges)
library(rtracklayer)
library(karyoploteR)
library(here)
library(readr)
library(sf)
library(rnaturalearth)
library(BSgenome.Hsapiens.UCSC.hg19)
library(GenomicRanges)
library(ggbio)
library(plyranges)
library(stars)
library(igraph)
library(sfnetworks)
library(slendr)
library(dismo)
library(sp)
library(terra)
library(gstat)
library(spacetime)
library(raster)
library(plyr)
# Variogram
v10<-variogram(VAR~ 1, data = ik.df)
# Intial parameter set by eye esitmation
m10<-vgm(0.15,"Exp",40000,0.05)
# least square fit
m.f.10<-fit.variogram(v10, m10)
m.f.10
v1<-plot(v10, pl=F,
model=m.f.10,
col="black",
cex=0.9,
lwd=0.5,
lty=1,
pch=19,
main="Indicator Variogram\n As > 10 ppb",
xlab="Distance (m)",
ylab="Semivariance")
v1
cv.10$var1.pred <- pmin(1, cv.10$var1.pred)
cv.10$var1.pred <- pmax(0, cv.10$var1.pred)
cv.10 <- krige.cv(ik.10 ~ 1, loc = ik.df, model = m.f.10, nfold=5)
cv.10$var1.pred <- pmin(1, cv.10$var1.pred)
cv.10$var1.pred <- pmax(0, cv.10$var1.pred)
cv.10 <- krige.cv(VAR ~ 1, loc = ik.df, model = m.f.10, nfold=5)
cv.10 <- krige.cv(VAR ~ 1, loc = ik.df, model = m.f.10, nfold=5)
cv.10$var1.pred <- pmin(1, cv.10$var1.pred)
cv.10$var1.pred <- pmax(0, cv.10$var1.pred)
plot(coordinates(cv.10), asp = 1, pch=21, col = ifelse(cv.10$observed,
"red", "green"), cex = 0.2 + 1 * cv.10$var1.pred,
xlab = "E (km)", ylab = "N (km)", main = "Probability of TRUE indicator (10 ppb)",
sub = "Actual indicator: green/red = FALSE/TRUE")
class(grid)
grid
ik.grid.10<-krige(VAR~ 1, nmax=50,
loc=ik.df,        # Data frame
newdata=grid,     # Prediction location
model = m.f.10)
max(ik.grid.10$var1.pred)
min(ik.grid.10$var1.pred)
pmin(1, ik.grid.10$var1.pred)
?pmin
?pmin
ik.grid.10$var1.pred <- pmin(1, ik.grid.10$var1.pred)
ik.grid.10$var1.pred
min(ik.grid.10$var1.pred)
max(ik.grid.10$var1.pred)
pmax(1, c(1.3,2,0.7))
pmin(1, c(1.3,2,0.7))
pmax(1, c(1.3,2,0.7))
ik.grid.10$var1.pred <- pmin(1, ik.grid.10$var1.pred)
ik.grid.10$var1.pred <- pmax(0, ik.grid.10$var1.pred)
summary(ik.grid.10)
spplot(ik.grid.10)
st_as_sf(ik.grid.10))
st_as_sf(ik.grid.10)
ggplot()+geom_sf(data=st_as_sf(ik.grid.10))
ggplot()+geom_sf(data=st_as_sf(ik.grid.10), color=var1.pred)
ggplot()+geom_sf(data=st_as_sf(ik.grid.10), color=var1.pred)
ggplot()+geom_sf(data=st_as_sf(ik.grid.10), mapping = aes(color=var1.pred))
ggplot()+geom_sf(data=st_as_sf(ik.grid.10), mapping = aes(fill=var1.pred))
ggplot()+geom_sf(data=st_as_sf(ik.grid.10), mapping = aes(colour=var1.pred))
ggplot()+geom_sf(data=st_as_sf(ik.grid.10), mapping = aes(color=var1.pred))
colr <-  colorRampPalette(c("blue","green",'yellow',"red"), space = "rgb")
ggplot()+geom_sf(data=st_as_sf(ik.grid.10), mapping = aes(color=var1.pred))+scale_color_brewer(colr)
colr <-  colorRampPalette(c("blue","green",'yellow',"red"), space = "rgb")
ggplot()+geom_sf(data=st_as_sf(ik.grid.10), mapping = aes(color=var1.pred))++ scale_color_brewer(palette="Dark2")
colr <-  colorRampPalette(c("blue","green",'yellow',"red"), space = "rgb")
ggplot()+geom_sf(data=st_as_sf(ik.grid.10), mapping = aes(color=var1.pred))+ scale_color_brewer(palette="Dark2")
colr <-  colorRampPalette(c("blue","green",'yellow',"red"), space = "rgb")
ggplot()+geom_sf(data=st_as_sf(ik.grid.10), mapping = aes(color=var1.pred))+ scale_color_distiller()
colr <-  colorRampPalette(c("blue","green",'yellow',"red"), space = "rgb")
ggplot()+geom_sf(data=st_as_sf(ik.grid.10), mapping = aes(color=var1.pred))+ scale_color_distiller(palette = "Spectral")
ggplot()+geom_sf(data=st_as_sf(ik.grid.10), mapping = aes(color=var1.pred))+ scale_color_distiller(palette = "Spectral")
ggplot()+geom_sf(data=st_as_sf(ik.grid.10), mapping = aes(color=var1.pred))+ scale_color_distiller(name = "Probability", palette = "Spectral")
st_as_sf(ik.grid.10)
summary(df$LONG_DEG)
summary(df$LAT_DEG)
# Add time column
ik.df
# Add time column
ik.df2 <- ik.df
ik.df2$ciao <- rnorm(n = length(ik.df$As))
ik.df2$ciao
ik.df@coords
ik.df@proj4string
ik.df@data
ik.df@coords.nrs
ik.df@coords$y
ik.df@coords[,"y"]
seq(from=120, to=0, by=-20)
length(ik.df$WELL_TYPE)
# Add time column
# I will define 6 times intervals
# 0-20, 20-40, 40-60, 60-80, 80-100, 100-120
# intialize to 0
# First I assign a time to all the points, sampled from 0 to 100
ik.df$TIME <- sample(0:100, replace = TRUE)
nrow(ik.df)
# Add time column
# I will define 6 times intervals
# 0-20, 20-40, 40-60, 60-80, 80-100, 100-120
# intialize to 0
# First I assign a time to all the points, sampled from 0 to 100
ik.df$TIME <- sample(0:100, size = nrow(ik.df), replace = TRUE)
hist(ik.df$TIME)
# Add time column
# First I assign a time to all the points, sampled from 0 to 100
my.df <- ik.df
my.df$TIME <- sample(0:100, size = nrow(my.df), replace = TRUE)
remove(ik.df2)
?case_when
my.df %>% dplyr::case_when(VAR==1~"CAZZO", VAR==1~"merda")
my.df %>% dplyr::case_when(VAR==1~"CAZZO", VAR==0~"merda")
my.df@data
# Now I will prevent points above a certain latitude and before a certain time to have VAR=1
x <-
my.df2 <- my.df@data %>% mutate(VARNEW = case_when(VAR==1~"CAZZO", VAR==0~"merda"))
my.df2
unique(my.df2$VARNEW)
my.df@data
as.data.frame(my.df)
26e5
# Now I will prevent points above a certain latitude and before a certain time to have VAR=1
x <-
my.df2 <- my.df %>% as.data.frame() %>% mutate(VARNEW = case_when(TIME>80 & y>26e5 & VAR==1 ~ 0, TIME>50 & y>27e5 & VAR==1 ~ 0, TIME>20 & y>28e5 & VAR==1 ~ 0))
my.df2$VARNEW
my.df2 <- my.df %>% as.data.frame() %>% mutate(VARNEW = case_when(TIME>80 & y>26e5 & VAR==1 ~ 0, TIME>50 & y>27e5 & VAR==1 ~ 0, TIME>20 & y>28e5 & VAR==1 ~ 0, .default = VAR))
my.df2$VARNEW
remove(my.df2)
# Now I will prevent points above a certain latitude and before a certain time to have VAR=1
my.df.data <- my.df %>% as.data.frame() %>% mutate(VARNEW = case_when(TIME>80 & y>26e5 & VAR==1 ~ 0, TIME>50 & y>27e5 & VAR==1 ~ 0, TIME>20 & y>28e5 & VAR==1 ~ 0, .default = VAR))
my.df@data <- my.df.data
my.df@data
table(my.df@data$VARNEW)
table(my.df@data$VAR)
dataTM <- as.POSIXlt(-my.df$TIME, origin="1970-01-01")
dataTM
my.df$TIME
my.df$TIME[1:10]
dataTM[1:10]
oldesttime <- 100
youngesttime <- 0
oldesttime <- 100
youngesttime <- 0
# This way years are second and I subtratc them to the origin
dataTM <- as.POSIXlt(-my.df$TIME, origin="1970-01-01")
oldestdata <- max( oldesttime, min(-my.df$TIME) )
oldestdata
min(-my.df$TIME)
oldesttime <- -Inf
youngesttime <- 0
# This way years are second and I subtratc them to the origin
dataTM <- as.POSIXlt(-my.df$TIME, origin="1970-01-01")
oldestdata <- max( oldesttime, min(-my.df$TIME) )
oldestdata
oldestdataTM <- as.POSIXlt(oldestdata, origin="1970-01-01")
oldestdataTM
youngestdata <- min( youngesttime, max(-my.df$TIME) )
youngestdataTM <- as.POSIXlt(youngestdata, origin="1970-01-01")
youngestdataTM
# Create 5 timepoints
numtimepoints=5
# Create temporal grid
if(!is.na(numtimepoints)){
rawtimegrid <- round(seq(oldestdata,youngestdata,length.out=numtimepoints))
tm.grid <- seq(as.POSIXct(oldestdataTM),as.POSIXct(youngestdataTM),length.out=numtimepoints)
} else {
rawtimegrid <- sort(unique(-data.UTM$TIME))
tm.grid <- as.POSIXct(rawtimegrid, origin="1970-01-01")
}
rawtimegrid
tm.grid
# Create spatiotemporal grid
grid.ST <- STF(sp.grid.UTM,tm.grid)
grid
# Create spatiotemporal grid
grid.ST <- STF(grid, tm.grid)
grid
grid.ST
SpatialPoints(my.df@coords)
crs(grid)
crs(SpatialPoints(my.df@coords))
# Get the variable of intereset
dataDF <- data.frame(my.df$VARNEW)
colnames(dataDF) <- "MYVAR"
dataSP <- SpatialPoints(my.df@coords)
# dataSP is just the coordinates of the sampled points
# dataTM the time in the right format
# dataDF the label, 0 or 1
timeDF <- STIDF(dataSP,dataTM,data=dataDF)
?variogramST
var <- variogramST(MYVAR~1,data=timeDF,tunit="sec",assumeRegular=F,na.omit=T,tlags=1:50)
# I try 1:50 for time lags and set time in sec, that 1 sec = 1 year
var <- variogramST(MYVAR~1,data=timeDF,tunit="secs",assumeRegular=F,na.omit=T,tlags=1:50)
saveRDS(var, "variogram.rds")
plot(var, map=F)
pred<-krigeST(MYVAR~ 1, nmax=50,
data = timeDF,        # Data frame
newdata=grid.ST,     # Prediction location
modelList = var)
m10<-vgm(0.15,"Exp",40000,0.05)
# least square fit
anistart <- 10
aniend <- 500
anistep <- 10
pars.l <- c(sill.s = 0, range.s = 0, nugget.s = 0,sill.t = 0, range.t = 0, nugget.t = 0,sill.st = 0, range.st = 0, nugget.st = 0, anis = 0)
#pars.u <- c(sill.s = 1e7, range.s = 1e7, nugget.s = 1e7,sill.t = 1e7, range.t = 1e7, nugget.t = 1e7,sill.st = 1e7, range.st = 1e7, nugget.st = 1e7,anis = 1e7)
finalVgmMSE <- Inf
finalVgm <- NULL
for( anisotropy in seq(anistart,aniend,anistep)){
try( {
metric <- vgmST("metric", joint = m10, stAni=anisotropy)
metric_Vgm <- fit.StVariogram(var, metric, method="L-BFGS-B",lower=pars.l,tunit="mins")
mse <- attr(metric_Vgm,"MSE")
#print(paste("Anisotropy: ",anisotropy,"; MSE: ",mse,sep=""))
if(mse < finalVgmMSE){
finalVgmMSE <- mse
finalVgm <- metric_Vgm
}
}, silent = TRUE)
}
m10<-vgm(0.15,"Exp",40000,0.05)
# least square fit
anistart <- 10
aniend <- 500
anistep <- 10
pars.l <- c(sill.s = 0, range.s = 0, nugget.s = 0,sill.t = 0, range.t = 0, nugget.t = 0,sill.st = 0, range.st = 0, nugget.st = 0, anis = 0)
#pars.u <- c(sill.s = 1e7, range.s = 1e7, nugget.s = 1e7,sill.t = 1e7, range.t = 1e7, nugget.t = 1e7,sill.st = 1e7, range.st = 1e7, nugget.st = 1e7,anis = 1e7)
finalVgmMSE <- Inf
finalVgm <- NULL
for( anisotropy in seq(anistart,aniend,anistep)){
try( {
metric <- vgmST("metric", joint = m10, stAni=anisotropy)
metric_Vgm <- fit.StVariogram(var, metric, method="L-BFGS-B",lower=pars.l,tunit="secs")
mse <- attr(metric_Vgm,"MSE")
#print(paste("Anisotropy: ",anisotropy,"; MSE: ",mse,sep=""))
if(mse < finalVgmMSE){
finalVgmMSE <- mse
finalVgm <- metric_Vgm
}
}, silent = TRUE)
}
stplot(finalVgm, map=F)
plot(finalVgm, map=F)
plot(finalVgm, map=F, all=T)
finalVgm
pred<-krigeST(MYVAR~ 1, nmax=50,
data = timeDF,        # Data frame
newdata=grid.ST,     # Prediction location
modelList = finalVgm)
attr(finalVgm, "spatial unit")
traceback()
is.projected(timeDF)
is.projected(timeDF@data)
is.projected(timeDF@sp)
?fit.StVariogram
?vgmST
metric <- vgmST(joint= m10, stAni=anisotropy)
metric <- vgmST("separable", joint = m10, stAni=anisotropy)
m10<-vgm(0.15,"Exp",40000,0.05)
# least square fit
anistart <- 10
aniend <- 500
anistep <- 10
pars.l <- c(sill.s = 0, range.s = 0, nugget.s = 0,sill.t = 0, range.t = 0, nugget.t = 0,sill.st = 0, range.st = 0, nugget.st = 0, anis = 0)
#pars.u <- c(sill.s = 1e7, range.s = 1e7, nugget.s = 1e7,sill.t = 1e7, range.t = 1e7, nugget.t = 1e7,sill.st = 1e7, range.st = 1e7, nugget.st = 1e7,anis = 1e7)
finalVgmMSE <- Inf
finalVgm <- NULL
for( anisotropy in seq(anistart,aniend,anistep)){
try( {
metric <- vgmST("metric", joint = m10)
metric_Vgm <- fit.StVariogram(var, metric, method="L-BFGS-B",lower=pars.l,tunit="secs")
mse <- attr(metric_Vgm,"MSE")
#print(paste("Anisotropy: ",anisotropy,"; MSE: ",mse,sep=""))
if(mse < finalVgmMSE){
finalVgmMSE <- mse
finalVgm <- metric_Vgm
}
}, silent = TRUE)
}
pred<-krigeST(MYVAR~ 1, nmax=50,
data = timeDF,        # Data frame
newdata=grid.ST,     # Prediction location
modelList = finalVgm)
m10<-vgm(0.15,"Exp",40000,0.05)
# least square fit
anistart <- 10
aniend <- 500
anistep <- 10
pars.l <- c(sill.s = 0, range.s = 0, nugget.s = 0,sill.t = 0, range.t = 0, nugget.t = 0,sill.st = 0, range.st = 0, nugget.st = 0, anis = 0)
#pars.u <- c(sill.s = 1e7, range.s = 1e7, nugget.s = 1e7,sill.t = 1e7, range.t = 1e7, nugget.t = 1e7,sill.st = 1e7, range.st = 1e7, nugget.st = 1e7,anis = 1e7)
finalVgmMSE <- Inf
finalVgm <- NULL
for( anisotropy in seq(anistart,aniend,anistep)){
try( {
metric <- vgmST("metric", joint = m10)
metric_Vgm <- fit.StVariogram(var, metric, method="L-BFGS-B",lower=pars.l,tunit="secs")
mse <- attr(metric_Vgm,"MSE")
#print(paste("Anisotropy: ",anisotropy,"; MSE: ",mse,sep=""))
if(mse < finalVgmMSE){
finalVgmMSE <- mse
finalVgm <- metric_Vgm
}
}, silent = TRUE)
}
pred<-krigeST(MYVAR~ 1, nmax=50,
data = timeDF,        # Data frame
newdata=grid.ST,     # Prediction location
modelList = finalVgm)
pred<-krigeST(MYVAR~ 1,
data = timeDF,        # Data frame
newdata=grid.ST,     # Prediction location
modelList = finalVgm)
finalVgm
?fit.StVariogram
m10<-vgm(0.15,"Exp",40000,0.05)
# least square fit
anistart <- 10
aniend <- 500
anistep <- 10
pars.l <- c(sill.s = 0, range.s = 0, nugget.s = 0,sill.t = 0, range.t = 0, nugget.t = 0,sill.st = 0, range.st = 0, nugget.st = 0, anis = 0)
#pars.u <- c(sill.s = 1e7, range.s = 1e7, nugget.s = 1e7,sill.t = 1e7, range.t = 1e7, nugget.t = 1e7,sill.st = 1e7, range.st = 1e7, nugget.st = 1e7,anis = 1e7)
finalVgmMSE <- Inf
finalVgm <- NULL
for( anisotropy in seq(anistart,aniend,anistep)){
try( {
metric <- vgmST("metric", joint = vgm(psill=1,"Exp", range=5e3, nugget=1e1), stAni=anisotropy)
metric_Vgm <- fit.StVariogram(var, metric, method="L-BFGS-B",lower=pars.l,tunit="secs")
mse <- attr(metric_Vgm,"MSE")
#print(paste("Anisotropy: ",anisotropy,"; MSE: ",mse,sep=""))
if(mse < finalVgmMSE){
finalVgmMSE <- mse
finalVgm <- metric_Vgm
}
}, silent = TRUE)
}
pred<-krigeST(MYVAR~ 1, nmax=50,
data = timeDF,        # Data frame
newdata=grid.ST,     # Prediction location
modelList = finalVgm)
is.projected(timeDF)
?is.projected
plot(var, map=F)
pred<-krigeST(MYVAR~ 1, nmax=50,
data = timeDF,        # Data frame
newdata=grid.ST,     # Prediction location
modelList = finalVgm)
is.projected(timeDF)
!is.projected(timeDF)
class(timeDF)
class(timeDF)
grid
is.projected(bd)
is.projected(SPDF.PROJ)
is.projected(ik.df)
is.projected(grid)
?is.projected
?variogram
pred<-krigeST(MYVAR~ 1, nmax=50,
data = timeDF,        # Data frame
newdata=grid.ST,     # Prediction location
modelList = finalVgm)
plot(finalVgm, map=F)
finalVgm$stModel
finalVgm$joint
finalVgm$stModel
finalVgm$stAni
metric <- vgmST("metric", joint = vgm(0.15,"Exp",40000,0.05), stAni=anisotropy)
metric
m10<-vgm(0.15,"Exp",40000,0.05)
# least square fit
anistart <- 1
aniend <- 500
anistep <- 10
pars.l <- c(sill.s = 0, range.s = 0, nugget.s = 0,sill.t = 0, range.t = 0, nugget.t = 0,sill.st = 0, range.st = 0, nugget.st = 0, anis = 0)
#pars.u <- c(sill.s = 1e7, range.s = 1e7, nugget.s = 1e7,sill.t = 1e7, range.t = 1e7, nugget.t = 1e7,sill.st = 1e7, range.st = 1e7, nugget.st = 1e7,anis = 1e7)
finalVgmMSE <- Inf
finalVgm <- NULL
for( anisotropy in seq(anistart,aniend,anistep)){
try( {
metric <- vgmST("metric", joint = m10, stAni=anisotropy)
metric_Vgm <- fit.StVariogram(var, metric, method="L-BFGS-B",lower=pars.l,tunit="secs")
mse <- attr(metric_Vgm,"MSE")
#print(paste("Anisotropy: ",anisotropy,"; MSE: ",mse,sep=""))
if(mse < finalVgmMSE){
finalVgmMSE <- mse
finalVgm <- metric_Vgm
}
}, silent = TRUE)
}
finalVgm
finalVgm$stAni
finalVgm$stModel
finalVgm$joint
?vgm
plot(finalVgm)
plot(finalVgm, map=F)
plot(finalVgm$joint, map=F)
m10<-vgm(0.15,"Exp",40000,0.05)
# least square fit
anistart <- 1
aniend <- 500
anistep <- 10
pars.l <- c(sill.s = 0, range.s = 0, nugget.s = 0,sill.t = 0, range.t = 0, nugget.t = 0,sill.st = 0, range.st = 0, nugget.st = 0, anis = 0)
#pars.u <- c(sill.s = 1e7, range.s = 1e7, nugget.s = 1e7,sill.t = 1e7, range.t = 1e7, nugget.t = 1e7,sill.st = 1e7, range.st = 1e7, nugget.st = 1e7,anis = 1e7)
finalVgmMSE <- Inf
finalVgm <- NULL
for( anisotropy in seq(anistart,aniend,anistep)){
try( {
metric <- vgmST("metric", joint = m10, stAni=anisotropy)
metric_Vgm <- fit.StVariogram(var, metric, method="L-BFGS-B", tunit="secs")
mse <- attr(metric_Vgm,"MSE")
#print(paste("Anisotropy: ",anisotropy,"; MSE: ",mse,sep=""))
if(mse < finalVgmMSE){
finalVgmMSE <- mse
finalVgm <- metric_Vgm
}
}, silent = TRUE)
}
# metric <- vgmST("metric", joint = m10, stAni=anisotropy)
prodSumModel <- vgmST("productSum",space = vgm(1, "Exp", 150, 0.5),time = vgm(1, "Exp", 5, 0.5),k = 50)
metric_Vgm <- fit.StVariogram(var, prodSumModel, method="L-BFGS-B", tunit="secs")
metric_Vgm
plot(metric_Vgm, map=F)
extractPar(metric_Vgm)
pred<-krigeST(MYVAR~ 1, nmax=50,
data = timeDF,        # Data frame
newdata=grid.ST,     # Prediction location
modelList = metric_Vgm)
plot(var, metric_Vgm, map=F)
plot(metric_Vgm, map=F)
plot(VAR, map=F)
plot(var, map=F)
stplot(timeDF)
